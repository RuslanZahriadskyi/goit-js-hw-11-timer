{"version":3,"sources":["webpack:///./timer.js","webpack:///./timer through class.js"],"names":["require","refs","daysRef","document","querySelector","hoursRef","minsRef","secsRef","myCalenadr","buttonStartRef","buttonStopRef","timer","flatpickr","enableTime","dateFormat","isActive","intervalId","start","this","setInterval","currentTime","Date","now","deltaTime","parse","value","clearInterval","updateClockFace","alert","stop","time","days","pad","Math","floor","hours","mins","secs","textContent","String","padStart","addEventListener","bind","expiredDate","targetDate","register","CountdownTimer","selector"],"mappings":"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","file":"main.e1392c07f30c6f17ad3e.js","sourcesContent":["import flatpickr from 'flatpickr';\r\nrequire('flatpickr/dist/themes/dark.css');\r\n\r\nconst refs = {\r\n  daysRef: document.querySelector('[data-value = days]'),\r\n  hoursRef: document.querySelector('[data-value = hours]'),\r\n  minsRef: document.querySelector('[data-value = mins]'),\r\n  secsRef: document.querySelector('[data-value = secs]'),\r\n  myCalenadr: document.querySelector('[data-calendar]'),\r\n  buttonStartRef: document.querySelector('[data-purpose=\"start\"]'),\r\n  buttonStopRef: document.querySelector('[data-purpose=\"stop\"]'),\r\n};\r\n\r\nconst fp = flatpickr(refs.myCalenadr, {\r\n  enableTime: true,\r\n  dateFormat: 'Y-m-d H:i',\r\n}); // flatpickr\r\n\r\nconst timer = {\r\n  isActive: false,\r\n  intervalId: null,\r\n  start() {\r\n    // console.log(this);\r\n    if (this.isActive) {\r\n      return;\r\n    }\r\n    this.isActive = true;\r\n    this.intervalId = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const endTime = Date.parse(refs.myCalenadr.value);\r\n      const deltaTime = endTime - currentTime;\r\n      if (deltaTime < 0) {\r\n        refs.myCalenadr.value = '';\r\n        clearInterval(this.intervalId);\r\n        updateClockFace(0);\r\n        alert('Установленная дата меньше текущей');\r\n        return;\r\n      }\r\n      updateClockFace(deltaTime);\r\n    }, 1000);\r\n  },\r\n  stop() {\r\n    // console.log(this);\r\n    clearInterval(this.intervalId);\r\n    this.intervalId = null;\r\n    this.isActive = false;\r\n  },\r\n};\r\n\r\nrefs.buttonStartRef.addEventListener('click', timer.start.bind(timer));\r\nrefs.buttonStopRef.addEventListener('click', timer.stop.bind(timer));\r\n\r\nfunction updateClockFace(time) {\r\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n  const hours = pad(\r\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n  );\r\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n  refs.daysRef.textContent = `${days}`;\r\n  refs.hoursRef.textContent = `${hours}`;\r\n  refs.minsRef.textContent = `${mins}`;\r\n  refs.secsRef.textContent = `${secs}`;\r\n}\r\n\r\nfunction pad(value) {\r\n  return String(value).padStart(2, '0');\r\n}\r\n","import flatpickr from 'flatpickr';\r\nrequire('flatpickr/dist/themes/material_green.css');\r\n\r\nconst refs = {\r\n  daysRef: document.querySelector('[data-value = days__through-сlass]'),\r\n  hoursRef: document.querySelector('[data-value = hours__through-сlass]'),\r\n  minsRef: document.querySelector('[data-value = mins__through-сlass]'),\r\n  secsRef: document.querySelector('[data-value = secs__through-сlass]'),\r\n  myCalenadr: document.querySelector('[data-calendar__through-сlass]'),\r\n  buttonStartRef: document.querySelector(\r\n    '[data-purpose=\"start__through-сlass\"]',\r\n  ),\r\n  buttonStopRef: document.querySelector('[data-purpose=\"stop__through-сlass\"]'),\r\n};\r\n\r\nconst fp = flatpickr(refs.myCalenadr, {\r\n  enableTime: true,\r\n  dateFormat: 'Y-m-d H:i',\r\n}); // flatpickr\r\n\r\nclass CountdownTimer {\r\n  constructor(expiredDate) {\r\n    this.expiredDate = expiredDate.targetDate;\r\n    this.isActive = false;\r\n    this.intervalId = null;\r\n  }\r\n\r\n  register() {\r\n    const that = this;\r\n    refs.buttonStartRef.addEventListener(\r\n      'click',\r\n      that.start.bind(CountdownTimer),\r\n    );\r\n    refs.buttonStopRef.addEventListener(\r\n      'click',\r\n      that.stop.bind(CountdownTimer),\r\n    );\r\n  }\r\n\r\n  start() {\r\n    // console.log(this);\r\n    if (this.isActive) {\r\n      return;\r\n    }\r\n    this.isActive = true;\r\n\r\n    this.intervalId = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const endTime = Date.parse(refs.myCalenadr.value);\r\n      const deltaTime = endTime - currentTime;\r\n      if (deltaTime < 0) {\r\n        refs.myCalenadr.value = '';\r\n        clearInterval(this.intervalId);\r\n        updateClockFace(0);\r\n        alert('Установленная дата меньше текущей');\r\n        return;\r\n      }\r\n      updateClockFace(deltaTime);\r\n    }, 1000);\r\n  }\r\n\r\n  stop() {\r\n    // console.log(this);\r\n    clearInterval(this.intervalId);\r\n    // console.log(this.intervalId);\r\n    this.intervalId = null;\r\n    this.isActive = false;\r\n  }\r\n}\r\n\r\nfunction updateClockFace(time) {\r\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n  const hours = pad(\r\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n  );\r\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n  refs.daysRef.textContent = `${days}`;\r\n  refs.hoursRef.textContent = `${hours}`;\r\n  refs.minsRef.textContent = `${mins}`;\r\n  refs.secsRef.textContent = `${secs}`;\r\n}\r\n\r\nfunction pad(value) {\r\n  return String(value).padStart(2, '0');\r\n}\r\n\r\nconst newCountdownTimer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: Date.parse(refs.myCalenadr.value),\r\n});\r\n\r\nnewCountdownTimer.register();\r\n// newCountdownTimer.registered();\r\n"],"sourceRoot":""}